Done. Rpi ntp  client-server 
Done. Esp8266 ntp client
Done. MotionCamera mqtt wrapper (status only)
Done. Motion event-on-picture (or on most pixels motion frame) mosquitto_publish picture in base64.
Done. Alarm on-arm start motion detection
Done. Alarm on-disarm pause motion detection
Done. Added language selection. Selection is saved in localStorage and reused on startup.

Done. Xmpp add configuration to function continuously, or by command.
Done: Xmpp remove code to activate deactivate by mqtt message
Done: Xmpp add code to activate deactivate by xmpp message
Done: Web app: enhance mqtt server definition to accomodate xmpp failover
Done: Web app: add code to initialize xmpp failover (when supported) in mqtt servers. 
Done: Web app: add message to xmpp when activated, in order for xmpp to send all mqtt messages via xmpp
Done: Web app: add message to xmpp when deactivated, in order for xmpp to stop sending mqtt messages via xmpp
Done: Xmpp when xmpp-activate message is received (via xmpp failover) all intercepted mqtt messages must be sent via xmpp
Done: Xmpp when xmpp-deactivate message is received (via xmpp failover) mqtt messages must stop being sent via xmpp

Enhance web app to store last received message (must have timestamp) and when activating failover request only newer messages
Enhance xmpp (messages must have timestamp) and when xmpp is activated, send only messages from mqttQueue newer than last web app message

Done (with eth and wifi, must also test with ppp). Develop eth0 monitor:
    when internet is not accessible via eth0 
        enable ppp
        publish mqtt message "server connection is now 3g"
    when eth0 is back on
        bring down ppp
        publish mqtt message "server connection is now land internet"

Done. Web app: add refresh button for server connection, in order to get latest value.

Done. Develop mqtt_smscentre
    process incoming sms
    receive mqtt messages to send as sms

Done. Store incoming sms messages and mark them as unread. 

Debug: if xmpp_proxy is active while mqtt is also working, duplicate configurations arreive at the web app and double the items and houses are displayed.

Create a mqtt_server that accepts requests and publishes replies regarding server reboot, shutdown, cpu and memory load, top 5 processes per CPU,top 5 processes per MEM.

Investigate camera usage for xmpp servers. If video stream is not possible replace with picture and add button to take snapshot and send (use the motion web interface e.g. curl -s -o /dev/null http://192.168.1.11:8080/1/action/snapshot).
Check motion's web api http://192.168.1.11:8080/1/detection/connection to see if it works for camera lost an camera re-activated.
Use sleekxmpp instead of xmpppy and try OTR.
Add component to store mqtt message history so that web can retrieve a device's history
Done. Add xmpp proxy as alternative server (to mqtt) to accomodate communication between the web app and the mqtt broker over IM (xmpp).
Create settings form in the web app, scenes

Done. Change http_configuration to mqtt_configuration and watch (and reload and publish) the configuration.json file whenever it changes (necessary for live refresh and mqtt over xmpp)

Notifier
    GSM: phonecalls, sms, when WiredInternet not available: email, IM
    Done. WiredInternet email, IM
Esp8266 OTA
http:
    Done. translator (house/floor/room/item from mqtt topic to name)
    Done. configurator (houses json)


Note:Motion never sends the on_event_end message when executed as a service. It also kind of freezes. Everything is ok when executed by hand "sudo motion".
     Added the appropriate command in rc.local